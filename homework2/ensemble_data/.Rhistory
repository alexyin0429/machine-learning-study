ua1       <- raster(dels[1])
nca_ua1   <- setnames(data.table(freq(del)), c("ua1", "nca_ua1"))
nca_ua1
# Stats ua1
ua1       <- raster(dels[1])
nca_ua1   <- setnames(data.table(freq(ua1)), c("ua1", "nca_ua1"))
bat_ua1   <- setnames(data.table(zonal(bat, ua1, "sum")), c("ua1", "bat_ua1"))
pop_ua1   <- setnames(data.table(zonal(pop, ua1, "sum")), c("ua1", "pop_ua1"))
pop_ua1
stats_ua1 <- Reduce(merge, list(nca_ua1, bat_ua1, pop_ua1))
stats_ua1
uumat
stats_ua1 <- merge(stats_ua1, uumat, by = "ua1", all.x = T)
stats_ua1
stats_ua1 <- merge(stats_ua1, uulab, by = "uu", all.x = T)
stats_ua1
stats_uai <- future_lapply(4, function(i) {
del       <- raster(dels[i])
nca_uai   <- setnames(data.table(freq(del)), c("uai", "nca_uai"))
bat_uai   <- setnames(data.table(zonal(bat, del, "sum")), c("uai", "bat_uai"))
pop_uai   <- setnames(data.table(zonal(pop, del, "sum")), c("uai", "pop_uai"))
stats_uai <- Reduce(merge, list(nca_uai, bat_uai, pop_uai))
stats_uai[, poprnk_uai := rank(-pop_uai, ties.method = "random")]
stats_uai[, batrnk_uai := rank(-bat_uai, ties.method = "random")]
stats_uai <- setNames(stats_uai, gsub("i", i, names(stats_uai)))
tmp_var   <- intersect(names(stats_uai), names(ids))
tmp_ids   <- unique(ids[, c("ua1", tmp_var), with = F])
stats_uai <- merge(stats_uai, tmp_ids, by = tmp_var, all.x = T)
stats_uai <- merge(stats_uai, stats_ua1, by = "ua1", all.x = T)
tmp_srt   <- do.call(c, sapply(c("^ua", "uu", "nca", "pop", "bat"), function(.) grep(., names(stats_uai))))
stats_uai <- stats_uai[, tmp_srt, with = F]
return(stats_uai)
})
naDiag(stats_uai[[1]])[order(-uu)]
stats_uai[[1]][order(-uu)]
stats_uai[[1]][order(uu)]
stats_uai <- stats_uai[[1]]
stats_uai
stats_uai[order(-pop_ua1)]
xtable(stats_uai[order(-pop_ua1)])
stats_uai <- stats_uai[order(-pop_ua1)][1:50]
stats_uai
xtable(stats_uai, digits = 0)
stats_uai <- future_lapply(4, function(i) {
del       <- raster(dels[i])
nca_uai   <- setnames(data.table(freq(del)), c("uai", "nca_uai"))
bat_uai   <- setnames(data.table(zonal(bat, del, "sum")), c("uai", "bat_uai"))
pop_uai   <- setnames(data.table(zonal(pop, del, "sum")), c("uai", "pop_uai"))
stats_uai <- Reduce(merge, list(nca_uai, bat_uai, pop_uai))
stats_uai[, poprnk_uai := rank(-pop_uai, ties.method = "random")]
stats_uai[, batrnk_uai := rank(-bat_uai, ties.method = "random")]
stats_uai <- setNames(stats_uai, gsub("i", i, names(stats_uai)))
tmp_var   <- intersect(names(stats_uai), names(ids))
tmp_ids   <- unique(ids[, c("ua1", tmp_var), with = F])
stats_uai <- merge(stats_uai, tmp_ids, by = tmp_var, all.x = T)
stats_uai <- merge(stats_uai, stats_ua1, by = "ua1", all.x = T)
tmp_srt   <- do.call(c, sapply(c("^ua", "uu", "nca", "pop", "bat"), function(.) grep(., names(stats_uai))))
stats_uai <- stats_uai[, tmp_srt, with = F]
return(stats_uai)
})
stats_uai <- stats_uai[[1]]
stats_uai <- stats_uai[[1]]
stats_uai <- stats_uai[order(-pop_ua1)][1:90]
xtable(stats_uai, digits = 0)
stats_uai
stats_uai <- future_lapply(4, function(i) {
del       <- raster(dels[i])
nca_uai   <- setnames(data.table(freq(del)), c("uai", "nca_uai"))
bat_uai   <- setnames(data.table(zonal(bat, del, "sum")), c("uai", "bat_uai"))
pop_uai   <- setnames(data.table(zonal(pop, del, "sum")), c("uai", "pop_uai"))
stats_uai <- Reduce(merge, list(nca_uai, bat_uai, pop_uai))
stats_uai[, poprnk_uai := rank(-pop_uai, ties.method = "random")]
stats_uai[, batrnk_uai := rank(-bat_uai, ties.method = "random")]
stats_uai <- setNames(stats_uai, gsub("i", i, names(stats_uai)))
tmp_var   <- intersect(names(stats_uai), names(ids))
tmp_ids   <- unique(ids[, c("ua1", tmp_var), with = F])
stats_uai <- merge(stats_uai, tmp_ids, by = tmp_var, all.x = T)
stats_uai <- merge(stats_uai, stats_ua1, by = "ua1", all.x = T)
tmp_srt   <- do.call(c, sapply(c("^ua", "uu", "nca", "pop", "bat"), function(.) grep(., names(stats_uai))))
stats_uai <- stats_uai[, tmp_srt, with = F]
return(stats_uai)
})
stats_uai
stats_uai <- stats_uai[[1]]
xtable(stats_uai, digits = 0)
cppUtils::cpp_quantile(c(1:100), .95)
cppUtils::cpp_quantile(c(NA, 1:100), .95)
c(NA, 1:100)
cppUtils::cpp_quantile(c(NA, 1:10), .95)
cppUtils::cpp_quantile(c(NA, rep(0, 90), 1:5), .95)
cppUtils::cpp_quantile(c(rep(0, 90), 1:5), .95)
cppUtils::cpp_quantile(c(NA, rep(0, 90), 1:5), .95)
cppUtils::cpp_quantile(c(NA, rep(0, 90)), .95)
cppUtils::cpp_quantile(c(NA, rep(0, 90), 1), .95)
c(NA, rep(0, 90), 1)
cppUtils::cpp_quantile(c(NA, rep(0, 90), 10), .95)
cppUtils::cpp_quantile(c(NA, rep(0, 90), 100), .95)
?quantile
quantile(c(NA, rep(0, 90), 100), .95)
quantile(c(NA, rep(0, 90), 100), .95)
quantile(c(NA, rep(0, 90), 100), .95, na.rm = T)
rep(0, 100)
cpp_quantile(rep(0, 100), .95)
cpp_quantile(rep(0, 100), .95)
library(cppUtils)
cpp_quantile(rep(0, 100), .95)
quantile(rep(0, 100), .95)
tmp <- "~/Desktop/tmp"
tmp
dir(tmp)
dir(tmp)
file.remove(dir(tmp))
file.remove(dir(tmp, full.names = T))
pacman::p_load(data.table, httr, rvest, stringr, dplyr)
url <- "http://spatialreference.org/ref/epsg/4326/proj4/"
read_html(url)
read_html(url) %>% html_nodes("p")
res <- read_html(url)
res
as.character(res)
res %>% html_attr("p")
res <- read_html(url)
res
res %>% html_attr()
res %>% html_attr("p")
res %>% html_attr("body")
res %>% html_attrs()
res %>% %>% html_nodes("p")
res %>% html_nodes("p")
res %>% html_nodes("p") %>% html_attrs()
res %>% html_nodes("p") %>% html_attr()
res %>% html_nodes("p") %>% html_attr("p")
res %>% html_children()
res
res
res
res[1]
res[2]
res$node
res <- read_xml(url)
res
html
?read_xml?read_html
?read_html
res <- read_html(url, as_html = T)
url <- "http://spatialreference.org/ref/epsg/4326/proj4/"
res <- read_html(url, as_html = T)
res <- read_html(x = url, as_html = T)
res <- read_html(url, as_html = F)
res <- read_html(url)
res
read_html(url)[1]
res <- read_html(url)
res %>% html_node()
res %>% html_node()
res %>% html_node("p")
res <- read_html(url)
res %>% html_node("p")
res <- read_html(url)
res
res %>% html_node()
res %>% html_nodes()
res %>% html_nodes("body")
res
res %>% html_attr("/p")
res %>% html_attr("p")
res %>% html_children("p")
res %>% html_text()
get_crs <- function(epsg) {
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text()
return(crs)
}
get_crs(4326)
get_crs(3035)
get_crs(2154)
??read_html
?raed_html
?read_html
library(httr)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
url
crs <- read_html(url) %>% html_text()
html_text(read_html(url))
library(rvest)
html_text(read_html(url))
get_crs <- function(epsg) {
library(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- html_text(read_html(url))
return(crs)
}
get_crs(2154)
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- html_text(read_html(url))
return(crs)
}
get_crs(2154)
get_crs <- function(epsg) {
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- rvest::html_text(rvest::read_html(url))
return(crs)
}
get_crs(2154)
get_crs <- function(epsg) {
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- xml2::html_text(rvest::read_html(url))
return(crs)
}
get_crs(2154)
get_crs <- function(epsg) {
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- xml2::html_text(xml2::read_html(url))
return(crs)
}
get_crs(2154)
?html_text
get_crs <- function(epsg) {
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- rvest::html_text(xml2::read_html(url))
return(crs)
}
get_crs(2154)
get_crs(3035)
get_crs(2154)
CRS(get_crs(2154))
require(sp)
CRS(get_crs(2154))
CRS(get_crs(3035))
html_text(read_html(url)) %>%
html_text(read_html(url)) %>% as.character
html_text(read_html(url)) %>% as.character
html_text(read_html(url)) %>% as.character
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text()
return(crs)
}
get_crs(4326)
? trimws
require(rvest)
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text() %>% trimws()
return(crs)
}
get_crs(4326)
get_crs <- function(epsg) {
cat(epsg)
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text() %>% trimws()
return(crs)
}
get_crs(4326)
epsg = 4326
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text() %>% trimws()
crs
names(crs)
names(crs) <- epsg
crs
names(crs) <- paste("epsg", epsg)
crs
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text() %>% trimws() %>% setNames(paste("epsg", epsg))
crs
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text() %>% trimws() %>% setNames(paste("epsg", epsg))
return(crs)
}
get_crs(4326)
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text() %>% trimws() %>% setNames(paste0("epsg_", epsg))
return(crs)
}
get_crs(4326)
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg , "/proj4/")
crs <- read_html(url) %>% html_text() %>% trimws()
return(crs)
}
get_crs(4326)
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg, "/proj4/")
crs <- read_html %>% htmÃ¹l_text() %>% trimws()
return(crs)
}
get_crs(4326)
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg, "/proj4/")
crs <- read_html %>% html_text() %>% trimws()
return(crs)
}
get_crs(4326)
get_crs <- function(epsg) {
require(rvest)
url <- paste0("http://spatialreference.org/ref/epsg/", epsg, "/proj4/")
crs <- read_html(url) %>% html_text() %>% trimws()
return(crs)
}
get_crs(4326)
library(textir) ## needed to standardize the data
library(class) ## needed for knn
library(ggplot2) # visualization
library(ggthemes) # visualization
library(scales) # visualization
library(dplyr) # data manipulation
library(randomForest) # random forest
library(corrplot) # correlation
library(gridExtra)
library(GGally)
library(e1071)
setwd("~/Dropbox/teaching/qsa/data/housing_price")
house_train <- read.csv("train.csv")
house_train
house_train <- fread("train.csv")
## read data
pacman::p_load(data.table)
house_train <- fread("train.csv")
house_train
str(house_train)
train <- fread("train.csv")
mvc = 0
for (i in 1:ncol(house_train))
{
m = sum(is.na(house_train[,i]))
print(paste("Column ",colnames(house_train[i])," has ",m," missing values"))
if(m>0){
mvc = mvc+1
}
else{
mvc
}
}
print(paste("Dataset has overall ",mvc," columns with missing values"))
## read data
pacman::p_load(data.table, randomForest)
rf_mod <- randomForest(SalePrice ~ . ,data = train, importance = T)
rf_mod <- randomForest(SalePrice ~ . , data = train, importance = T)
rf_mod
dim(train)
complete.cases(train)
table(complete.cases(train))
house$Alley
train$Alley
names(train)
train[is.na(Alley), Alley := "No alley access"]
train
grep("Bsmt", names(train))
grep("Bsmt", names(train), value = T)
train[, lapply(.SD function(var) { var[is.na(var)] <- "No Basement" }), .SDcols = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2")]
train[, lapply(.SD, function(var) { var[is.na(var)] <- "No Basement" }), .SDcols = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2")]
train
train <- train[, lapply(.SD, function(var) { var[is.na(var)] <- "No Basement" }), .SDcols = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2")]
train
train[is.na(Alley), Alley := "No alley access"]
train <- fread("train.csv")
train[is.na(Alley), Alley := "No alley access"]
train
train <- train[, lapply(.SD, function(var) {
var[is.na(var)] <- "No Basement"
return(var)
}), .SDcols = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2")]
train
train <- fread("train.csv")
train[is.na(Alley), Alley := "No alley access"]
train <- train[, .SD := lapply(.SD, function(var) {
var[is.na(var)] <- "No Basement"
return(var)
}), .SDcols = c("BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinSF1", "BsmtFinType2")]
train
train <- fread("train.csv")
train
attach(.env)
naDiag(train)
library(mice)
mice1 <- mice(train, m = 5, maxit = 50, meth = "pmm", seed = 1)
mice1 <- mice(train[, 1:2], m = 5, maxit = 50, meth = "pmm", seed = 1)
mice1 <- mice(train[, 1:10], m = 5, maxit = 50, meth = "pmm", seed = 1)
mice1 <- mice(train, m = 5, maxit = 50, meth = "pmm", seed = 1)
names(train)
train[, BsmtUnf := NULL]
mice1 <- mice(train, m = 5, maxit = 50, meth = "pmm", seed = 1)
train[, BsmtUnfSF := NULL]
mice1 <- mice(train, m = 5, maxit = 50, meth = "pmm", seed = 1)
mice1 <- mice(train[, 1:36], m = 5, maxit = 50, meth = "pmm", seed = 1)
mice1
mice1$data
naDiag(mice1$data)
naDiag(data.table(mice1$data))
bsk_foo(100)
# Kernel
bsk_foo <- function(bdw, res = 200, rnd = 4) {
k_sp     <- seq(-res * ceiling(bdw / res), res * ceiling(bdw / res), res)
k_sp     <- SpatialPointsDataFrame(expand.grid(k_sp, k_sp), data.frame(id = seq(length(k_sp)^2)))
bsd_foo  <- function(.) (1 - (. / bdw)^2)^2
k_sp$bsd <- round(c(bsd_foo(gDistance(k_sp, gCentroid(k_sp), byid = T))), rnd)
circ     <- spCircle(bdw, centerPoint = c(x = 0, y = 0))$spCircle
k_sp$inc <- replace(over(k_sp, circ), is.na(over(k_sp, circ)), 0)
k_sp$bsd[k_sp$inc == 0] <- 0
k_rst    <- rasterFromXYZ(cbind(coordinates(k_sp), k_sp$bsd))
k_rst    <- crop(k_rst, extent(-bdw, bdw, -bdw, bdw))
bsk      <- as.matrix(k_rst)
return(bsk)
}
bsk_foo(100)
# Packages
pacman::p_load(cppUtils, data.table, future.apply, igraph, optparse, raster, rgeos, rgdal, sampSurf, sp, Rcpp, snow, tictoc)
bsk_foo(100)
bsk_foo(200)
bsk_foo(300)
bsk_foo(500)
bsk_foo(700)
sapply(seq(300, 3000, 100), function(bdw) dim(bsk_foo(bdw)))
sapply(seq(300, 3000, 150), function(bdw) dim(bsk_foo(bdw)))
sapply(seq(300, 3000, 200), function(bdw) dim(bsk_foo(bdw)))
sapply(seq(100, 3000, 200), function(bdw) dim(bsk_foo(bdw)))
bsk   <- bsk_foo(x)
ca    <- raster(file.path(src, "ca200.tif"))
var.d <- fread(file.path(src, paste0(var, "_raw.csv")))
var.r <- raster(file.path(src, paste0(var, "_raw.tif")))
smo.p <- file.path(src, paste0(var, "_smo.tif"))
args <- list(seed = 1, var = "voba", btyp = "core", ktyp = "bsk1970", repl = T, iter = 100, nwo = 20)
# args <- list(seed = 1, var = "voba", btyp = "core", ktyp = "bsk1970", repl = T, iter = 100, nwo = 20)
cat("Script: metro_delineation.R\nParams:", paste(names(args), do.call(c, args), sep = "="), "\n")
invisible(list2env(args, .GlobalEnv))
# Paths
src <- "~/Dropbox/research/artmetro/data/metro_src"
tmp <- "~/Desktop/tmp"
out <- file.path("~/Dropbox/research/artmetro/data/robust/delin_bandwidth", var)
invisible(sapply(c(tmp, out), function(dir) if(!dir.exists(dir)) dir.create(dir)))
invisible(file.remove(dir(tmp, full.names = T)))
# Parallel
options(future.globals.maxSize = 1e3*1024^2)
plan(multiprocess, workers = nwo, .cleanup = T)
bts_foo <- function(id, var.d, cain, btyp, repl) {
bts <- setDT(var.d)
if(btyp == "city") {
bts[, caid := cain[sample(.N, nrow(bts), repl), caid]]
} else if(btyp == "core") {
bts <- merge(bts, cain, "caid")
bts[, caid := cain[sample(.N, nrow(bts), repl), caid]]
} else if(btyp == "centre") {
bts <- merge(bts, cain, "caid")
bts[, caid := caid[sample(.N, .N, repl)], by = cty]
}
bts <- bts[, lapply(.SD, sum), by = caid, .SDcols = var]
bts <- bts[match(cain$caid, caid), !"caid"]
bts[is.na(bts)] <- 0
bts <- bts[match(raster::values(ca), cain$caid)]
bts <- setValues(ca, bts[[var]])
writeRaster(bts, file.path(tmp, paste0("bts", id, ".tif")), overwrite = T)
}
# Smoothing
smo_foo <- function(id, bsk) {
mid <- ceiling(length(bsk) / 2)
smo <- raster(file.path(tmp, paste0("bts", id, ".tif")))
smo <- focal(smo, bsk, function(.) cpp_kernel(., mid), pad = T,
filename = file.path(tmp, paste0("bts", id, ".tif")), overwrite = T)
}
# Quantile
q95_foo <- function(tmp) {
beginCluster()
q95 <- stack(dir(tmp, full.names = T))
q95 <- clusterR(q95, fun = calc, args = list(fun = function(k) quantile(k, .95, na.rm = T)))
endCluster()
return(q95)
}
# Delineations
del_foo <- function(smo, q95) {
del <- smo > q95
ids <- focal(del, matrix(1, 3, 3), cpp_sum, pad = T)
ids <- clump(ids, directions = 8)
ids <- mask(ids, del, maskvalue = 0)
del <- mask(ids, del, maskvalue = NA)
return(del)
}
# Kernel
bsk_foo <- function(bdw, res = 200, rnd = 4) {
k_sp     <- seq(-res * ceiling(bdw / res), res * ceiling(bdw / res), res)
k_sp     <- SpatialPointsDataFrame(expand.grid(k_sp, k_sp), data.frame(id = seq(length(k_sp)^2)))
bsd_foo  <- function(.) (1 - (. / bdw)^2)^2
k_sp$bsd <- round(c(bsd_foo(gDistance(k_sp, gCentroid(k_sp), byid = T))), rnd)
circ     <- spCircle(bdw, centerPoint = c(x = 0, y = 0))$spCircle
k_sp$inc <- replace(over(k_sp, circ), is.na(over(k_sp, circ)), 0)
k_sp$bsd[k_sp$inc == 0] <- 0
k_rst    <- rasterFromXYZ(cbind(coordinates(k_sp), k_sp$bsd))
k_rst    <- crop(k_rst, extent(-bdw, bdw, -bdw, bdw))
bsk      <- as.matrix(k_rst)
return(bsk)
}
bsk   <- bsk_foo(x)
ca    <- raster(file.path(src, "ca200.tif"))
var.d <- fread(file.path(src, paste0(var, "_raw.csv")))
var.r <- raster(file.path(src, paste0(var, "_raw.tif")))
bdw = 100
bsk
bsk   <- bsk_foo(bdw)
bsk
focal(ca, bsk, function(k) cpp_kernel(k, ceiling(length(bsk) / 2)), pad = T)
